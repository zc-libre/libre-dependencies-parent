buildscript {
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.35")
    }
}

plugins {
    id "base"
    id "org.sonarqube" version "3.4.0.2513"
}

ext {
    javaVersion = JavaVersion.VERSION_17
    commons = (subprojects - project(":libre-dependencies"))
}

subprojects {
    group = GROUPID
    version = VERSION
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    // ci 自动发布 SNAPSHOT 版本
    task publishSnapshot(type: GradleBuild) {
        if (VERSION.endsWith('SNAPSHOT')) {
            tasks = ['clean', 'build', 'publish']
        }
    }
}

configure(commons) {
    apply plugin: "java-library"
    apply from: "${rootProject.projectDir}/gradle/version.gradle"
    apply from: "${rootProject.projectDir}/gradle/publish-jar.gradle"
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenCentral()
    }

    configurations {
        management {
            canBeConsumed = false
            canBeResolved = false
            visible = false
        }
        compileClasspath.extendsFrom(management)
        testCompileClasspath.extendsFrom(management)
        runtimeClasspath.extendsFrom(management)
        testRuntimeClasspath.extendsFrom(management)
        annotationProcessor.extendsFrom(management)
        testAnnotationProcessor.extendsFrom(management)
    }

    dependencies {
        // import BOM.
        management platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        management platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
        management platform(project(":libre-dependencies"))
        compileOnly "org.slf4j:slf4j-api"
        compileOnly "jakarta.servlet:jakarta.servlet-api"
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testCompileOnly "org.springframework:spring-test"
        testImplementation "org.slf4j:slf4j-api"
        testImplementation "org.junit.jupiter:junit-jupiter"
    }

    compileJava.options.compilerArgs.add '-parameters'
    compileTestJava.options.compilerArgs.add '-parameters'
    compileJava.dependsOn(processResources)
}


def getRepositoryUsername() {
    return System.getenv("ALIYUN_USERNAME") ?: ALIYUN_USERNAME
}

def getRepositoryPassword() {
    return System.getenv("ALIYUN_PASSWORD") ?: ALIYUN_PASSWORD
}

def getSonarToken() {
    return System.getenv('SONAR_TOKEN') ?: SONAR_TOKEN
}


