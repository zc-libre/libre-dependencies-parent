buildscript {
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.33")
    }
}


plugins {
    id "org.sonarqube" version "3.0"
}

ext {
    javaVersion = JavaVersion.VERSION_17
    awssdkVersion = "1.12.213"
    cglibVersion = "3.3.0"
    commonsLang3Version = "3.12.0"
    commonsCollections4Version = "4.4"
    commonsIOVersion = "2.11.0"
    commonsCodecVersion = "1.15"
    findbugsVersion = "3.0.2"
    guavaVersion = "31.1-jre"
    mapstructVersion = "1.5.1.Final"
    mybatisPlusVersion = "3.5.2"
    okHttpVersion = "4.10.0"
    springBootVersion = "3.0.0"
    springCloudVersion = "2021.0.3"
    springNativeVersion = '0.10.5'
    swaggerAnnotationsVersion = "1.6.6"
    swagger3xAnnotationsVersion = "2.1.2"
    jsoupVersion = "1.15.3"
    gsonVersion = "2.8.9"
    easyCaptchaVersion = "1.6.2"
    redissonVersion = "3.17.3"
    lombokVersion = "1.18.22"
}


// 编译脚本

configure(subprojects) {
    group = GROUPID
    version = VERSION
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    // apply plugin: 'io.spring.javaformat'
    // ci 自动发布 SNAPSHOT 版本
    task publishSnapshot(type: GradleBuild) {
        if (VERSION.endsWith('SNAPSHOT')) {
            tasks = ['clean', 'build', 'publish']
        }
    }
}

configure(subprojects - project(":libre-dependencies")) {
    apply plugin: "java-library"
    apply from: "${rootProject.projectDir}/gradle/publish-jar.gradle"
    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    repositories {
        mavenLocal()
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://maven.aliyun.com/repository/spring" }
        maven { url "https://maven.aliyun.com/repository/spring-plugin" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
        mavenCentral()
    }

    dependencies {
        // import BOM.
        implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
        compileOnly "org.slf4j:slf4j-api"
        compileOnly "jakarta.servlet:jakarta.servlet-api"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"
        testCompileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.springframework:spring-test"
        testImplementation "org.slf4j:slf4j-api"
        testImplementation "junit:junit"
    }

    compileJava.dependsOn(processResources)
}


def getRepositoryUsername() {
    return System.getenv("ALIYUN_USERNAME") ?: ALIYUN_USERNAME
}

def getRepositoryPassword() {
    return System.getenv("ALIYUN_PASSWORD") ?: ALIYUN_PASSWORD
}

def getSonarToken() {
    return System.getenv('SONAR_TOKEN') ?: SONAR_TOKEN
}


