jar {
    afterEvaluate {
        manifest {
            attributes["Implementation-Title"] = project.name
            attributes["Implementation-Version"] = project.version
            attributes["Automatic-Module-Name"] = project.name.replace('-', '.')  // for Jigsaw
            attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        failOnError false
        links "https://docs.oracle.com/javase/8/docs/api"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('signMavenJavaPublication')) {
        task.enabled = new File(project.property('signing.secretKeyRingFile') as String).isFile()
    }
}

publishing {
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? REPOSITORY_URL_SNAPSHOT : REPOSITORY_URL_RELEASE
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = GIT_URL

                scm {
                    connection = GIT_SCM_CONNECTION
                    developerConnection = GIT_SCM_CONNECTION
                    url = GIT_URL
                }
                licenses {
                    license {
                        name = LICENSE_NAME
                        url = LICENSE_URL
                    }
                }
                developers {
                    developer {
                        name = DEVELOPER_NAME
                        email = DEVELOPER_EMAIL
                    }
                }

                withXml {
                    def root = asNode()
                    root.dependencies.'*'.findAll {
                        def d = it
                        d.scope.text() == 'runtime' && project.configurations
                            .findByName("implementation").allDependencies.find { dep ->
                            dep.name == it.artifactId.text()
                        }.each() {
                            d.scope*.value = 'compile'
                            d.appendNode('optional', true)
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}


